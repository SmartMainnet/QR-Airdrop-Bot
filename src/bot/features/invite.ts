import { Composer, InlineKeyboard, InlineQueryResultBuilder } from 'grammy'
import { logHandle } from '../helpers/logging.js'
import type { Context } from '../context.js'
import { config } from '#root/config.js'

const composer = new Composer<Context>()

composer.inlineQuery(
  /.*/,
  logHandle('inline-query-invite'),
  async (ctx: Context) => {
    const user = ctx.from!

    if (String(ctx.match) === String(user.id)) {
      const inlineQuery = InlineQueryResultBuilder.article(
        String(user.id),
        `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ ${config.REWARD.toString().replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1,')} QR`,
        {
          thumbnail_url: 'https://i.ibb.co/SxL94Sm/QR-Logo-Blue.png',
          description:
            `–í—ã –ø–æ–ª—É—á–∏—Ç–µ ${config.REWARD.toString().replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1,')} QR –∑–∞ –∫–æ–∂–¥–æ–≥–æ –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –µ–≥–æ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!`,
          reply_markup: new InlineKeyboard().url(
            `–ü–æ–ª—É—á–∏—Ç—å ${config.REWARD.toString().replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1,')} QR`,
            `https://t.me/${ctx.me.username}?start=${user.id}`
          ),
        }
      ).text(
        `üéÅ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ ${config.REWARD.toString().replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1,')} $QR</b>\n\n<b>$QR</b> ‚Äî —ç—Ç–æ –º–µ–º-—Ç–æ–∫–µ–Ω –Ω–∞ TON, –ø–æ—Å–≤—è—â—ë–Ω–Ω—ã–π QR-–∫–æ–¥—É. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–æ–±—Ä–∞—Ç—å —Å–ø–ª–æ—á—ë–Ω–Ω–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å –Ω–æ–≤—ã–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏!`
      )

      await ctx.answerInlineQuery([inlineQuery], {
        cache_time: config.INLINE_QUERY_CACHE_TIME,
      })
    }
  }
)

export { composer as inviteFeature }
